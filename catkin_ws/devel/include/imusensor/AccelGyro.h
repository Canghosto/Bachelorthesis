// Generated by gencpp from file imusensor/AccelGyro.msg
// DO NOT EDIT!


#ifndef IMUSENSOR_MESSAGE_ACCELGYRO_H
#define IMUSENSOR_MESSAGE_ACCELGYRO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imusensor
{
template <class ContainerAllocator>
struct AccelGyro_
{
  typedef AccelGyro_<ContainerAllocator> Type;

  AccelGyro_()
    : accel()
    , gyro()  {
      accel.assign(0.0);

      gyro.assign(0.0);
  }
  AccelGyro_(const ContainerAllocator& _alloc)
    : accel()
    , gyro()  {
  (void)_alloc;
      accel.assign(0.0);

      gyro.assign(0.0);
  }



   typedef boost::array<float, 3>  _accel_type;
  _accel_type accel;

   typedef boost::array<float, 3>  _gyro_type;
  _gyro_type gyro;





  typedef boost::shared_ptr< ::imusensor::AccelGyro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imusensor::AccelGyro_<ContainerAllocator> const> ConstPtr;

}; // struct AccelGyro_

typedef ::imusensor::AccelGyro_<std::allocator<void> > AccelGyro;

typedef boost::shared_ptr< ::imusensor::AccelGyro > AccelGyroPtr;
typedef boost::shared_ptr< ::imusensor::AccelGyro const> AccelGyroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imusensor::AccelGyro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imusensor::AccelGyro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imusensor::AccelGyro_<ContainerAllocator1> & lhs, const ::imusensor::AccelGyro_<ContainerAllocator2> & rhs)
{
  return lhs.accel == rhs.accel &&
    lhs.gyro == rhs.gyro;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imusensor::AccelGyro_<ContainerAllocator1> & lhs, const ::imusensor::AccelGyro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imusensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imusensor::AccelGyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imusensor::AccelGyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::AccelGyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::AccelGyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::AccelGyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::AccelGyro_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imusensor::AccelGyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "063d41f75cc2a42677d200b5fb1fbffc";
  }

  static const char* value(const ::imusensor::AccelGyro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x063d41f75cc2a426ULL;
  static const uint64_t static_value2 = 0x77d200b5fb1fbffcULL;
};

template<class ContainerAllocator>
struct DataType< ::imusensor::AccelGyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imusensor/AccelGyro";
  }

  static const char* value(const ::imusensor::AccelGyro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imusensor::AccelGyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] accel\n"
"float32[3] gyro\n"
;
  }

  static const char* value(const ::imusensor::AccelGyro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imusensor::AccelGyro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.gyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelGyro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imusensor::AccelGyro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imusensor::AccelGyro_<ContainerAllocator>& v)
  {
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyro[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMUSENSOR_MESSAGE_ACCELGYRO_H
