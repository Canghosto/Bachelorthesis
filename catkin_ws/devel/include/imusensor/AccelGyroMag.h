// Generated by gencpp from file imusensor/AccelGyroMag.msg
// DO NOT EDIT!


#ifndef IMUSENSOR_MESSAGE_ACCELGYROMAG_H
#define IMUSENSOR_MESSAGE_ACCELGYROMAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imusensor/AccelGyro.h>

namespace imusensor
{
template <class ContainerAllocator>
struct AccelGyroMag_
{
  typedef AccelGyroMag_<ContainerAllocator> Type;

  AccelGyroMag_()
    : accelGyro()
    , magnetometer_value()  {
      magnetometer_value.assign(0.0);
  }
  AccelGyroMag_(const ContainerAllocator& _alloc)
    : accelGyro(_alloc)
    , magnetometer_value()  {
  (void)_alloc;
      magnetometer_value.assign(0.0);
  }



   typedef  ::imusensor::AccelGyro_<ContainerAllocator>  _accelGyro_type;
  _accelGyro_type accelGyro;

   typedef boost::array<double, 3>  _magnetometer_value_type;
  _magnetometer_value_type magnetometer_value;





  typedef boost::shared_ptr< ::imusensor::AccelGyroMag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imusensor::AccelGyroMag_<ContainerAllocator> const> ConstPtr;

}; // struct AccelGyroMag_

typedef ::imusensor::AccelGyroMag_<std::allocator<void> > AccelGyroMag;

typedef boost::shared_ptr< ::imusensor::AccelGyroMag > AccelGyroMagPtr;
typedef boost::shared_ptr< ::imusensor::AccelGyroMag const> AccelGyroMagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imusensor::AccelGyroMag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imusensor::AccelGyroMag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imusensor::AccelGyroMag_<ContainerAllocator1> & lhs, const ::imusensor::AccelGyroMag_<ContainerAllocator2> & rhs)
{
  return lhs.accelGyro == rhs.accelGyro &&
    lhs.magnetometer_value == rhs.magnetometer_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imusensor::AccelGyroMag_<ContainerAllocator1> & lhs, const ::imusensor::AccelGyroMag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imusensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imusensor::AccelGyroMag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imusensor::AccelGyroMag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::AccelGyroMag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::AccelGyroMag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::AccelGyroMag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::AccelGyroMag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imusensor::AccelGyroMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e8da3dda6fbc637beb21b878c94fd9a";
  }

  static const char* value(const ::imusensor::AccelGyroMag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e8da3dda6fbc637ULL;
  static const uint64_t static_value2 = 0xbeb21b878c94fd9aULL;
};

template<class ContainerAllocator>
struct DataType< ::imusensor::AccelGyroMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imusensor/AccelGyroMag";
  }

  static const char* value(const ::imusensor::AccelGyroMag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imusensor::AccelGyroMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AccelGyro accelGyro\n"
"float64[3] magnetometer_value\n"
"\n"
"================================================================================\n"
"MSG: imusensor/AccelGyro\n"
"float32[3] accel\n"
"float32[3] gyro\n"
;
  }

  static const char* value(const ::imusensor::AccelGyroMag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imusensor::AccelGyroMag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accelGyro);
      stream.next(m.magnetometer_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelGyroMag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imusensor::AccelGyroMag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imusensor::AccelGyroMag_<ContainerAllocator>& v)
  {
    s << indent << "accelGyro: ";
    s << std::endl;
    Printer< ::imusensor::AccelGyro_<ContainerAllocator> >::stream(s, indent + "  ", v.accelGyro);
    s << indent << "magnetometer_value[]" << std::endl;
    for (size_t i = 0; i < v.magnetometer_value.size(); ++i)
    {
      s << indent << "  magnetometer_value[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.magnetometer_value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMUSENSOR_MESSAGE_ACCELGYROMAG_H
