// Generated by gencpp from file imusensor/ImuEventMag.msg
// DO NOT EDIT!


#ifndef IMUSENSOR_MESSAGE_IMUEVENTMAG_H
#define IMUSENSOR_MESSAGE_IMUEVENTMAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <imusensor/AccelGyroMag.h>

namespace imusensor
{
template <class ContainerAllocator>
struct ImuEventMag_
{
  typedef ImuEventMag_<ContainerAllocator> Type;

  ImuEventMag_()
    : time()
    , seqNum(0)
    , imuId(0)
    , data()  {
    }
  ImuEventMag_(const ContainerAllocator& _alloc)
    : time()
    , seqNum(0)
    , imuId(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef uint8_t _seqNum_type;
  _seqNum_type seqNum;

   typedef uint8_t _imuId_type;
  _imuId_type imuId;

   typedef  ::imusensor::AccelGyroMag_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::imusensor::ImuEventMag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imusensor::ImuEventMag_<ContainerAllocator> const> ConstPtr;

}; // struct ImuEventMag_

typedef ::imusensor::ImuEventMag_<std::allocator<void> > ImuEventMag;

typedef boost::shared_ptr< ::imusensor::ImuEventMag > ImuEventMagPtr;
typedef boost::shared_ptr< ::imusensor::ImuEventMag const> ImuEventMagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imusensor::ImuEventMag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imusensor::ImuEventMag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imusensor::ImuEventMag_<ContainerAllocator1> & lhs, const ::imusensor::ImuEventMag_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.seqNum == rhs.seqNum &&
    lhs.imuId == rhs.imuId &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imusensor::ImuEventMag_<ContainerAllocator1> & lhs, const ::imusensor::ImuEventMag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imusensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imusensor::ImuEventMag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imusensor::ImuEventMag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::ImuEventMag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imusensor::ImuEventMag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::ImuEventMag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imusensor::ImuEventMag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imusensor::ImuEventMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7545afec4862898e43946844ce5bcea9";
  }

  static const char* value(const ::imusensor::ImuEventMag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7545afec4862898eULL;
  static const uint64_t static_value2 = 0x43946844ce5bcea9ULL;
};

template<class ContainerAllocator>
struct DataType< ::imusensor::ImuEventMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imusensor/ImuEventMag";
  }

  static const char* value(const ::imusensor::ImuEventMag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imusensor::ImuEventMag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time\n"
"uint8 seqNum\n"
"uint8 imuId\n"
"AccelGyroMag data\n"
"\n"
"================================================================================\n"
"MSG: imusensor/AccelGyroMag\n"
"AccelGyro accelGyro\n"
"float64[3] magnetometer_value\n"
"\n"
"================================================================================\n"
"MSG: imusensor/AccelGyro\n"
"float32[3] accel\n"
"float32[3] gyro\n"
;
  }

  static const char* value(const ::imusensor::ImuEventMag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imusensor::ImuEventMag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.seqNum);
      stream.next(m.imuId);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuEventMag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imusensor::ImuEventMag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imusensor::ImuEventMag_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "seqNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seqNum);
    s << indent << "imuId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imuId);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::imusensor::AccelGyroMag_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMUSENSOR_MESSAGE_IMUEVENTMAG_H
